                      JavaScript (ES5, Javascript, Vanilla Javascript)
                      ------------------------------------------------
Introduction
Hoisting
Types
Primitive Types
functions
Objects
JSON
arrays
Bind call apply
Closures
this
Class
Prototypes
Inheritance
error handling
Polymorphism
Singleton
Module Pattern


What is Javascript ?

Javascript is  a programming language that allows you to implement complex features on web pages

HTML - is a markup language that we use to structure and give meaning to web content

CSS - is a language of style rules that we used to apply styling to our HTML content

Javascript - is scripting langauge that enables you to create dynamically updating content

1. Syntax Parser
------------------
A program that reads your code and determines what it does and if its syntax is valid

2. Lexical Environment
-----------------------
Where something sits physically in the code you write

3.Execution context
--------------------
A wrapper to help manage the code that is running.

for .e.g. There are lots of lexical environments. 
          Which one is currently running is managed by execution context.

Name/ Value pairs
-----------------
A name which maps to a unique value

Object
---------
A collection of name value pairs

The Global environment and Global Object
-----------------------------------------
When ever code is run in javascript it runs inside the execution context

1. Global execution context ( base)
2. Local Execution context

Execution Context ( Javscript engine creates these two things for us)
----------------- 
1. Global Object 
2. this ( variable)

Global - Means which is not inside the function 
local - Means is inside the function

var - helps you to declare your variable in javascript (ES5)

function - is block of code

Hoisting
----------------------------------------------

1. Read variabels and functions and add default value for variables 
2. Code execution

Hoisting
----------
1. Javascript engine will read your variables and functions and it adds 
   memeory space for your varibales and functions

2. variables will be added to memory and will be assigned a deafult value called 'undefined'

3. function will be added to memory completely ( entire function)

undefined - special value in javascript, whch takes up a memory space

Note : Never assign undefined to a variable, because it is difficult to 
       find whether the value is "undefined" or javascript engine sets it up


Single Threaded ( Javascript)
------------------------------
one command at a time 

Synchronous
-----------
one at a time

Single threaded synchronus execution is only on thing executing at a time.

Invocation()
------------
Running a function by using paranathesis

functionb(){

}

function a() {
   b()
}

a(); // Invocation

Variable Environment
--------------------
Where the variable live

Scope 
-------
Where a variable is avilable in your code

Asynchrnous 
------------
More than one at a time

Types
-------

Dynamic Typing ( Javscript)
---------------
 We don't have to tell the engine that what type of data a variable holds, 
 it figures out while your code is running.

Static Typing ( C# or Java)
----------------------------
bool isAdmin = "hello" // error

Primitive Types
----------------
A type of data which represents a single value, any data which is not an object.

1. undefined - represents lack of existance 
               ( we should never set a avariable to this)

var a = undefined;// Never do this

2. NULL - reprsents lack of existance (we can set a variable using this)

var a = null; // valid code

3. Boolean - trur or false

4. Number - Regular or Floating point number 

5. String - A sequqnce of charcaters

6. Symbol - used in ES6 

Default Values
----------------
When you don't assign a value. the value you get or recieve is called default value

functions
----------
1. Named or Regular functions
2. Anonymous functions or function expressions
3. IIFs ( Immediately invoked function)

2. Anonymous function
---------------------
Function without Name

Why to use ?
------------
1. We often use it as an argument to other function
2. to create IIFs (Immediately invoked functions)

3. Immediately Invoked functions
--------------------------------
IIFs are very useful because "they don't pollute the glbal object"

Why to use ?
------------
1. They don't pollute global object
2. do not create unncessary global variables and funcitions
3. no conflict with other functions & variables even if they have same name
4. organize javascript code
5. Make javascript code maitainable

-> In Javascript paranthesis can not contain statements , 
   it can only contain an expression

First Class Functions
------------------------
Functions are called first-class functions, what ever you can do with other types 
you can do with functions

1. Assign the function to a variable
2. pass them as a parameter
3. create them on the fly

Function is a special type of object

Object
---------
Object is a collection of name vaue pairs

we can create object in 4 different ways

1. var obj = new Object()
2. var obj = {}
3. var obj = Object.create({})
4. using constructor functions

Object.create() - This method creates a new object using an existing 
                  object as the prototype or new object

JSON - Javascript Object Notation

- this is is sinspired by javascript Object literal

older way
---------

<data>
   <firstName>Uma<firstName>
   <lastName>Jagrav<lastName>
<data>

{"firstName": "uma" , 
 "lastName":"jagrav", 
 "grade": 2
 "IsAdmin" : true
 }

1 . properties have to wrapped in quotes for JSON
2. Anyhing which is JSON valid is valid in object literal 

JSON.stringify() - Converts a javascript value in to seralized JSON string

JSON.parse() - Deserializes a JSON string representation to a javascript object


Arrays
-------
An array is an object that can store collection of items of same data type or different datatype

{ } - Object literal 
[ ] - Array literal 

array index always start with 0

Bind - Sets `this` keyword and creates a copy of that function

call - sets `this` keyword and executes the function immediately 
       and this doesn't create a new copy. here we pass comma 
       seperated valuues

apply - Apply is similar to call, it accepts an array of aruguments 
        instead of comma seperated values


The call , bind and apply methods are used to set `this` keyword  
independent of how function is called

Class
-----
Javascript is a prototype based language which contains no class like you find in C# or java

javascript uses class a a function

function Student(){
   
}